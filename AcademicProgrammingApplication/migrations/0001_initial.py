# Generated by Django 5.0.3 on 2024-04-21 22:38

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


def create_roles(apps, schema_editor):
    Role = apps.get_model('AcademicProgrammingApplication', 'Role')
    Role.objects.create(name='Administrador')
    Role.objects.create(name='Líder de procesos')
    Role.objects.create(name='Asistente de procesos')


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.CharField(max_length=200, primary_key=True, serialize=False,
                                        verbose_name='Número de identificación')),
                ('name', models.CharField(max_length=200, verbose_name='Profesor')),
                ('email', models.EmailField(max_length=254, verbose_name='Correo electrónico')),
                ('cellphone', models.CharField(max_length=20, verbose_name='Teléfono celular')),
                ('city', models.CharField(max_length=200, verbose_name='Ciudad')),
                ('state', models.CharField(choices=[('ACTIVO', 'Activo'), ('INACTIVO', 'Inactivo')], default='Activo',
                                           max_length=200, verbose_name='Estado')),
                ('picture', models.ImageField(upload_to='pictures/', verbose_name='Foto del profesor')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.RunPython(create_roles),
        migrations.CreateModel(
            name='Semester',
            fields=[
                ('period', models.CharField(max_length=10, primary_key=True, serialize=False,
                                            verbose_name='Cohorte del semestre')),
                ('start_date', models.DateField(verbose_name='Fecha de inicio')),
                ('ending_date', models.DateField(verbose_name='Fecha de finalización')),
            ],
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('code', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Materia')),
                ('nrc', models.CharField(max_length=200, verbose_name='NRC')),
                ('credits', models.PositiveIntegerField(verbose_name='Número de créditos')),
                ('type',
                 models.CharField(choices=[('CURRICULAR', 'Curricular'), ('ELECTIVA', 'Electiva')], max_length=200,
                                  verbose_name='Tipo')),
                ('syllabus',
                 models.FileField(error_messages={'invalid_extension': 'Por favor, suba el archivo en formato .PDF'},
                                  upload_to='syllabuses/',
                                  validators=[django.core.validators.FileExtensionValidator(['pdf'])],
                                  verbose_name='Syllabus')),
                ('start_date', models.DateField(verbose_name='Fecha de inicio')),
                ('ending_date', models.DateField(verbose_name='Fecha de finalización')),
                ('modality',
                 models.CharField(choices=[('PRESENCIAL', 'Presencial'), ('VIRTUAL', 'Virtual')], max_length=200,
                                  verbose_name='Modalidad de la materia')),
                ('num_sessions', models.PositiveIntegerField(verbose_name='Cantidad de sesiones')),
            ],
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('contract_status',
                 models.CharField(choices=[('ACTIVO', 'Activo'), ('INACTIVO', 'Inactivo')], max_length=200,
                                  verbose_name='Estado del contrato')),
                ('contact_preparation_date', models.DateField(verbose_name='Fecha de elaboración')),
                ('id_teacher',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False,
                                      to='AcademicProgrammingApplication.teacher', verbose_name='Profesor asociado')),
            ],
        ),
        migrations.CreateModel(
            name='Viatic',
            fields=[
                ('transport', models.BooleanField(verbose_name='Transporte')),
                ('accommodation', models.BooleanField(verbose_name='Alojamiento')),
                ('viatic', models.BooleanField(verbose_name='Viático')),
                ('id_teacher',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False,
                                      to='AcademicProgrammingApplication.teacher', verbose_name='Profesor asociado')),
            ],
        ),
        migrations.CreateModel(
            name='Program',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Programa')),
                ('faculty', models.CharField(max_length=200, verbose_name='Facultad academica')),
                ('director', models.CharField(max_length=200, verbose_name='Director de programa')),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Costo de matricula')),
                ('type', models.CharField(choices=[('ESPECIALIZACIÓN', 'Especialización'), ('MAESTRÍA', 'Maestría'),
                                                   ('DOCTORADO', 'Doctorado')], max_length=200,
                                          verbose_name='Tipo de programa')),
                ('modality',
                 models.CharField(choices=[('PRESENCIAL', 'Presencial'), ('VIRTUAL', 'Virtual')], max_length=200,
                                  verbose_name='Modalidad del programa')),
                ('duration', models.CharField(max_length=200, verbose_name='Duración del programa')),
                ('curriculum',
                 models.FileField(error_messages={'invalid_extension': 'Por favor, suba el archivo en formato .PDF'},
                                  upload_to='curriculums/',
                                  validators=[django.core.validators.FileExtensionValidator(['pdf'])],
                                  verbose_name='Curriculum del programa')),
                ('semesters', models.ManyToManyField(to='AcademicProgrammingApplication.semester',
                                                     verbose_name='Semestres asociados')),
                ('subjects', models.ManyToManyField(to='AcademicProgrammingApplication.subject',
                                                    verbose_name='Materias de programas')),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id',
                 models.CharField(max_length=10, primary_key=True, serialize=False, verbose_name='Número de sesión')),
                ('start_date', models.DateTimeField(verbose_name='Fecha de inicio de la clase')),
                ('ending_date', models.DateTimeField(verbose_name='Fecha de finalización de la clase')),
                ('modality',
                 models.CharField(choices=[('PRESENCIAL', 'Presencial'), ('VIRTUAL', 'Virtual')], max_length=200,
                                  verbose_name='Modalidad de la clase')),
                ('classroom', models.CharField(blank=True, max_length=200, null=True, verbose_name='Salón de clase')),
                ('link', models.URLField(blank=True, null=True, verbose_name='Enlace de la plataforma virtual')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              to='AcademicProgrammingApplication.teacher',
                                              verbose_name='Profesor asociado')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                              to='AcademicProgrammingApplication.subject',
                                              verbose_name='Materia asociada')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.group',
                                                  verbose_name='groups')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE,
                                           to='AcademicProgrammingApplication.role')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
